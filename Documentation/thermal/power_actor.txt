Power Actor API
===============

The base power actor API is meant to be used to derive specific power
actors, such as a cpu power actor.  Power actors can be registered by
calling `power_actor_register()` and should be unregistered by calling
`power_actor_unregister()` with the `struct power_actor *` received in
the call to `power_actor_register()`.

This can't be implemented using the cooling device API because:

1.  get_max_state() gives you the maximum cooling state which, for
    passive devices, is the minimum performance (frequency in case of
    cpufreq cdev).  get_max_power() gives you the maximum power, which
    gives you the maximum performance (frequency in the case of CPUs,
    GPUs and buses)

2.  You need to pass the thermal_zone_device to all the callbacks,
    something that the current cooling device API doesn't do.

Callbacks
---------

1. u32 get_req_power(struct power_actor *actor,
					struct thermal_zone_device *tz)
@actor: a valid `struct power_actor *` registered with
        `power_actor_register()`
@tz:	the thermal zone closest to the actor (typically, the thermal
		zone the caller is operating on)

`get_req_power()` returns the current requested power in milliwatts.

2. u32 get_max_power(struct power_actor *actor,
					struct thermal_zone_device *tz)
@actor: a valid `struct power_actor *` registered with
        `power_actor_register()`
@tz:	the thermal zone closest to the actor (typically, the thermal
		zone the caller is operating on)

`get_max_power()` returns the maximum power that the device could
consume if it was fully utilized.  It's a function as some devices'
maximum power consumption can change due to external factors such as
temperature.

3. int set_power(struct power_actor *actor,
				struct thermal_zone_device *tz, u32 power)
@actor: a valid `struct power_actor *` registered with
        `power_actor_register()`
@tz:	the thermal zone closest to the actor (typically, the thermal
		zone the caller is operating on)
@power: power in milliwatts

`set_power()` should configure the device to consume @power
milliwatts.

Returns 0 on success, -E* on error.
